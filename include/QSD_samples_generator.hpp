/**
 * \file QSD_samples_generator.hpp
 * \copyright The 3-clause BSD license is applied to this software.
 * \author Florent Hédin
 * \author Tony Lelièvre
 * \author École des Ponts - ParisTech
 * \date 2016-2018
 */

#ifndef QSD_SAMPLES_GENERATOR_HPP_INCLUDED
#define QSD_SAMPLES_GENERATOR_HPP_INCLUDED

#include <cstdlib>
#include <memory>

#include "global.hpp"
#include "logger.hpp"
#include "md_interface.hpp"
#include "lua_interface.hpp"

#include "mpi_utils.hpp"

class QSD_samples_generator final
{

public:
  
  QSD_samples_generator(DATA& _dat,
                        std::unique_ptr<ATOM[]>& _at,
                        std::unique_ptr<MD_interface>& _md,
                        std::unique_ptr<luaInterface>& _luaItf);
  
  ~QSD_samples_generator();
  
  void run();
  
private:
  
  // references obtained from constructor
  DATA& dat;                              ///< Simulation data, see global.hpp
  std::unique_ptr<ATOM[]>& at;            ///< Array of coordinates and velocities 
  std::unique_ptr<MD_interface>& md;      ///< The interface to the MD engine
  std::unique_ptr<luaInterface>& luaItf;  ///< The Lua interface

  // references to objects used by all parrep variants
  const lua_ParVal_map& params;                                 ///< Map of Lua parameters
  const lua_function_state_init&      lua_state_init;        ///< Lua function for state initialization
  const lua_function_check_state&     lua_check_state;       ///< Lua function for state checking
  
  /**
   *  Lua function saving to disk (any type/format of file, this is decided on Lua's side)
   *  the QSD distributed initial conditions generated by the fleming-viot algorithm.
   */
  const lua_function_data_save& lua_save_conditions;
  
  /*
   * some MPI parameters and variables common to all parRep algorithms
   */
  int32_t masterRank = -1;    ///< the rank of the MPI master process ; set at initialization by MPI_setup()
  bool i_am_master = false; ///< Is this rank the masterRank ? set at initialization by MPI_setup()
  
  MPI_Comm global_comm = MPI_COMM_NULL;     ///< The global communicator: by default a simple cloning of MPI_COMM_WORLD, but may be a more restricted set of ranks (may be setup in a possible override of MPI_setup)
  MPI_Group global_group = MPI_GROUP_NULL;   ///< The global group associated to the global_comm
  
  MPI_Info rma_info = MPI_INFO_NULL;        ///< This holds optmization hints communicated to MPI when creating RMA windows
  
  int32_t mpi_id_in_gcomm = -1;  ///< the id of this mpi rank in global_comm
  int32_t mpi_gcomm_size = -1;   ///< the total number of ranks in global_comm

  /*
   * some simulation parameters common to all parRep algorithms
   */
  
  bool     left_state = false;    ///< for checking if the system left the state

  /**
   * \enum 
   *  During the Fleming-Viot procedure, the MPI ranks are divided in 2 groups:
   *  + One reference walker: it will be the MPI masterRank, if it leaves the state the procedure is
   *    stopped (equivalent to the decorrelation phase of the original ParRep Algorithm) 
   *  + Fleming-Viot walkers: their role is to accumulate Gelman-Rubin statistics for assessing convergence
   *    (equivalent to dephasing), if they leave the state they are cloned from one of other other FV_WALKER
   */
  enum FV_ROLE
  {
    REF_WALKER, ///< the masterRank is a REF_WALKER
    FV_WALKER   ///< the N-1 other ranks have a role of FV_WALKER
  };
  
  FV_ROLE my_FV_role; ///< keeps trace of the role of this F-V replica
  
  /// set string names corresponding to the FV_ROLE 's
  const std::map<FV_ROLE,std::string> role_string = { {FV_ROLE::REF_WALKER,"REF_WALKER"} , {FV_ROLE::FV_WALKER,"FV_WALKER"} };
  
  /*
   * some simulation parameters only used by this version of ParRepFV
   *  see parRep_abstract.hpp for common parameters
   */
  
  // parameters for Fleming-Viot combined stage
  uint32_t gr_check; ///< frequency at which to accumulate G-R observables 
  uint32_t fv_check; ///< frequency at whick to check if the F-V reference walker left the state
  
  double fv_local_time = 0.; ///< physical time during Fleming Viot procedure
  ENERGIES fv_e;   ///< ENERGIES of the system during Fleming Viot procedure
  
  double grTol;  ///< Tolerance for the Gelman-Rubin statistics
  
  /** a map for storing GR observables parsed from lua input file :
   *  -> the key is a string containing the name of the observable ;
   *  -> the value is a an object typedefed as a 'GR_function', see lua interface header for info ;
   * such functions take no parameters and returns a double precision number, i.e. an 'observation'
   */
  const std::map<GR_function_name,GR_function>& gr_functions;
  
  /**
   * a vector of the names used for indexing the above defined map
   */
  const std::vector<GR_function_name>& gr_names;

  /*
   * DECLARATIONS : parrep simulation split in several methods
   */

  void MPI_setup();
  
  void MPI_clean();
  
  /**
   * @brief This performs simultaneously a decorrelation and a dephasing stage
   *  It is using a Fleming viot particle process:
   *  no a priori t_corr or t_dephase are required, as Gelman-Rubin statistics
   *  are used for achieving convergence
   */
  void do_FlemingViot_procedure();


};


#endif // QSD_SAMPLES_GENERATOR_HPP_INCLUDED


